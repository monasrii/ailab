!pip install anytree
import numpy as np
import pandas as pd 
from anytree import Node, RenderTree,search
from queue import *
import os

#creating tree
def moveMan(parent_node):
    child=dict(parent_node.name)
    #east
    if child["man"]==False:
        child["man"]=True
        return child
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    #west
    if child["man"]==True:
        child["man"]=False
        return child
    else : return None
def moveTiger(parent_node):
    child=dict(parent_node.name)
    #east
    if child["man"]==False and child["Tiger"]==False:
        child["man"]=True
        child["Tiger"]=True
        return child
        
    #west
    if child["man"]==True and child["Tiger"]==True:
        child["man"]=False
        child["Tiger"]=False
        return child
    else : return None
    
    
def moveGoat(parent_node):
    child=dict(parent_node.name)
    #east
    if child["man"]==False and child["goat"]==False:
        child["man"]=True
        child["goat"]=True
        
        
        return child
        
    #west
    if child["man"]==True and child["goat"]==True:
        child["man"]=False
        child["goat"]=False
        return child
    else : return None
    
def moveGrass(parent_node):
    child=dict(parent_node.name)
    #east
    if child["man"]==False and child["grass"]==False:
        child["man"]=True
        child["grass"]=True
        
        
        return child
        
    #west
    if child["man"]==True and child["grass"]==True:
        child["man"]=False
        child["grass"]=False
        return child
    else : return None
    
    
    #constraints
    def constraints(node):
    if(node["grass"]==True and node["goat"]==True and node["man"]==False):
        node["state"]=False
    if(node["grass"]==False and node["goat"]==False and  node["man"]==True):
        node["state"]=False
    if(node["Tiger"]==True and node["goat"]==True and  node["man"]==False):
        node["state"]=False
    if(node["Tiger"]==False and node["goat"]==False and node["man"]==True):
        node["state"]=False
    if(node["Tiger"]==True and node["goat"]==True and node["man"]==True and node["grass"]==True):
        node["state"]="Goal"
    return node
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    #dfs

import time
start = time. time()
Start_point={
            "man":False,
           "goat":False,
           "tiger":False,
           "grass":False,
            "state":True
          }

q = LifoQueue()
udo = Node(Start_point)

q.put(udo)
while(True):
    
    Parent=q.get()
    if((Parent.name["tiger"]==True and Parent.name["goat"]==True and Parent.name["grass"]==True and Parent.name["man"]==True )):
        break
    
    
    temp=moveMan(Parent)
    if temp != None:
        temp=find_repeat(udo,temp)
        constraints(temp)
        child1=Node(temp,parent=Parent)
        
        if temp["state"]==True:
            q.put(child1)


    temp=moveTiger(Parent)
    if temp != None:
        temp=find_repeat(udo,temp)
        constraints(temp)
        child2=Node(temp,parent=Parent)
        if temp["state"]==True:
            q.put(child2)


    temp=moveGoat(Parent)
    if temp != None:
        temp=find_repeat(udo,temp)
        constraints(temp)
        child3=Node(temp,parent=Parent)
        if temp["state"]==True:
            q.put(child3)


    temp=moveGrass(Parent)
    if temp != None:
        temp=find_repeat(udo,temp)
        constraints(temp)
        child4=Node(temp,parent=Parent)
        if temp["state"]==True:
            q.put( child4)
    
    
    if q.empty()==1:
        break
    

for pre, fill, node in RenderTree(udo):
       print("%s%s" % (pre, node.name))     
        
end = time. time()
print("Time Taken",end - start)
